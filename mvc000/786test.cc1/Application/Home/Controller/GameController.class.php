<?php/** * * @authors    阿连 () * @wat Arlen专属上古神兽 * @url * * ━━━━━━神兽出没━━━━━━ * 　　   ┏┓　 ┏┓ * 　┏━━━━┛┻━━━┛┻━━━┓ * 　┃              ┃ * 　┃       ━　    ┃ * 　┃　  ┳┛ 　┗┳   ┃ * 　┃              ┃ * 　┃       ┻　    ┃ * 　┃              ┃ * 　┗━━━┓      ┏━━━┛ Code is far away from bugs with the animal protecting. *       ┃      ┃     神兽保佑,代码无bug。 *       ┃      ┃ *       ┃      ┗━━━┓ *       ┃      　　┣┓ *       ┃      　　┏┛ *       ┗━┓┓┏━━┳┓┏━┛ *     　  ┃┫┫　┃┫┫ *     　  ┗┻┛　┗┻┛ * * ━━━━━━感觉萌萌哒━━━━━━ */namespace Home\Controller;use Think\Controller;class GameController extends CommonController{    public function Game(){		$id = I('get.id', 0, 'intval');        $info = D('Category')->where(array('id'=>$id))->find();		$fieldsAry = C('CUSTOM_FIELDS');		$fields = array();		$tmp = array();		foreach($fieldsAry as $key => $field){			if($info[$key] == 2) continue;			$fields[] = array('sort'=>$info[$key.'_sort'],'title'=>$fieldsAry[$key], 'name'=>$key);			$tmp[] = $info[$key.'_sort'];		}		array_multisort($tmp, SORT_DESC, $fields);  //多维排序        $this->assign('info', $info);		$this->assign('fields', $fields);		        $this->display();    }    public function Gametext(){        $id = I('get.id', 0, 'intval');        $info = D('Category')->where(array('id'=>$id))->find();        $fieldsAry = C('CUSTOM_FIELDS');        $fields = array();        $tmp = array();        foreach($fieldsAry as $key => $field){            if($info[$key] == 2) continue;            $fields[] = array('sort'=>$info[$key.'_sort'],'title'=>$fieldsAry[$key], 'name'=>$key);            $tmp[] = $info[$key.'_sort'];        }        array_multisort($tmp, SORT_DESC, $fields);  //多维排序        $this->assign('info', $info);        $this->assign('fields', $fields);        $this->assign('urlname', $_SERVER['HTTP_HOST']);				        $this->display();    }    /**     * 添加信息     */    public function add()    {        //默认显示添加表单        if (IS_AJAX) {			//            echo 123;            //如果用户提交数据            $data = array();            $fields = C('CUSTOM_FIELDS');            $fields['cate_id'] = $_POST['cate_id'];            $fields['username'] = $_POST['username1'];            $fields['verify'] = '验证码';    if (!$fields['username'] || !preg_match('/^\d{5,8}$/', $fields['username'])) {        		  outputjson(array('status'=>-1, 'msg'=>'请输入正确的会员ID(5-8位纯数字)！'));		      EXIT;    }            foreach ($fields as $key => $value) {                if($key=='username'){                    $data[$key] = strtolower(I('post.' . $key));                }else{                    $data[$key] = I('post.' . $key);                }            }																					if($fields['cate_id']==86){				if($_POST['application_type']=="" || ($_POST['application_type']!=1 && $_POST['application_type']!=2)){										  outputjson(array('status'=>-1, 'msg'=>'请选择方案！'));					  exit;									}							}			 $data['username'] = $_POST['username1'];//            echo "<pre>";//            print_r($data);die;            /* if(!$this->check_verify($data['verify'])){                outputjson(array('status'=>-1, 'msg'=>'请正确输入4位验证码！'));            } */            //判断申请的项目是否开放            $category = D('Category')->where(array('id' => $data['cate_id']))->find();            if (!$category || $category['status'] == 0) {                outputjson(array('status' => -2, 'msg' => '对不起，项目未开放申请！'));            }            //验证数据            if (!preg_match("/^[a-zA-Z0-9_-]{4,16}$/", $data['username'])) {                outputjson(array('status' => -3, 'msg' => '用户名不合法，4-16位账号，仅限于字母加数字'));            }            $fields = C('CUSTOM_FIELDS');            foreach ($fields as $key => $value) {                if ($category[$key] == 1 && empty($data[$key])) { //字段启用,用户输入为空                    outputjson(array('status' => -4, 'msg' => "请输入" . $value . "！", 'name' => $key));                }            }            /*限制黑名单申请*/            $model = D('Post');            $list = $model->where(array('username'=>I('post.username'), 'blacklist'=>1))->field('id')->find();            if($list){                $list_text = D('system')->find();                outputjson(array('msg' => $list_text['black_text']));                exit;            }//          获取会员ip，通用此变量            $usernameip = get_client_ip(0, true); //高级获取IP模式(防止做CDN后获取到的是节点的IP) by afu 2018/9/9									            $usernametime = time();            if(time() <= strtotime(date('Y-m-d'))+43200){                $tongyong_time_start =strtotime(date('Y-m-d'))-43200;            }elseif(time() >= strtotime(date('Y-m-d'))+43200){                $tongyong_time_start =strtotime(date('Y-m-d'))+43200;            }//            $tongyong_time_start =1517932800+43200;            $tongyong_time_end = strtotime(date('Y-m-d'))+129600;//            $tongyong_time_end = 1517932800+129600;//            那些信息可以重复注册            $category_repeatability = M('Category')->            where(array('id' => I('post.cate_id')))->            field('username_repeatability,member_name_repeatability,contact_qq_repeatability,contact_via_mail_repeatability,ip_repeatability_repeat')                ->select();								            if ($category_repeatability[0]['username_repeatability'] == 1) {                $username_name = I('post.username'); //会员账号            }						if($username_name){	}else{ $username_name = $_POST['username1'];}			            if ($category_repeatability[0]['member_name_repeatability'] == 1) {                $username_member_name = I('post.member_name'); //会员姓名            }            if ($category_repeatability[0]['contact_qq_repeatability'] == 1) {                $username_contact_qq = I('post.contact_qq'); //qq            }            if ($category_repeatability[0]['contact_via_mail_repeatability'] == 1) {                $username_contact_via_mail = I('post.contact_via_mail'); //邮箱            }//           这里是按照名字，项目id，和会员ip来查询会员            $where1['username'] = $username_name;            $where1['cate_id'] = $category['id'];            $where1['ip'] = $usernameip;            $whereaddtime1['addtime'] = array(array('gt',$tongyong_time_start),array('lt',$tongyong_time_end)) ;//            $whereaddtime1['addtime'] = array('LT',$tongyong_time_end);            //$datapost = M('Post')->where($where1)->where($whereaddtime1)->order('addtime desc')->select();            $datapost = M('Post')->where(array('username' => $username_name,'cate_id'=>$category['id'],'ip'=>$usernameip))->select();//            echo M('Post')->getLastSql();die;            $datafff = array();            foreach ($datapost as $key => $value) {                $datafff = $value;            }            if ($category_repeatability[0]['ip_repeatability_repeat'] <= $datafff['ip_repeat_num']) {                $username_ip = $usernameip; //ip            }//          这里查询出来，是来判断用户名字，ip，邮箱等 是否可以重复申请            $only_post = M('Post')->            where(array('username' => $username_name, 'cate_id' => $_POST['cate_id'], 'ip' => $username_ip, 'contact_via_mail' => $username_contact_via_mail, 'contact_qq' => $username_contact_qq, 'member_name' => $username_member_name, '_logic' => 'or'))->            field('username,ip,contact_via_mail,contact_qq,member_name,cate_id,ip_repeat_num')->find();//            echo "<pre>";//            echo "后台设置的次数==".$category_repeatability[0]['ip_repeatability_repeat'];//            echo "用户申请的次数==".$datafff['ip_repeat_num'];//            echo "\n";//            die;			            $post_kkk = M('Post')->where(array('username' => I('post.username'),'cate_id'=>$category['id']))->field('username,addtime')->order('addtime desc')->find();//                计算美东时间 每天的0:00 的时间戳 每天中午12：00            $time_start = $tongyong_time_start;            $time_end = $tongyong_time_end;//            echo "开始时间：".$time_start."\n";//            echo "玩家注册时间：".$post_kkk['addtime']."\n";//            echo "结束时间：".$time_end."\n";//            die;//                echo "用户申请时间：".date($post_kkk[0]['addtime']-43200)."\n"; // 2018-02-04 10:51:56//                echo "美东时间中午12点：".date($time_start)."\n";die;   // 2018-02-04 12:00:00			//if(I('post.username')){}else{I('post.username') = $_POST['username1'];}			I('post.username') == $_POST['username1'];			            //if (I('post.username') != null) {												$cfid = M('Post')->where(array('username' => $_POST['username1'],'cate_id'=>$_POST['cate_id']))->field('id,addtime')->order('addtime desc')->find();									$today = strtotime(date("Y-m-d"),time()); 						if($cfid){ 							if($cfid['addtime'] > $today){					outputjson(array('msg' => '该会员账号已申请过该优惠，不能再次申请。'));					exit;				}																}																											$ipall = M('Post')-> where(array('cate_id' => $_POST['cate_id'], 'ip' => get_client_ip(0, true)))-> field('username')->select();								$ipnum = count($ipall);										if($ipnum > $category_repeatability[0]['ip_repeatability_repeat']){																				outputjson(array('msg' => '该ip申请超出上限'));								exit;					}																						//                判断会员账号               // if ($only_post['username'] == $_POST['username1'] && $category['username_repeatability']==1 && $usernametime <= $time_start && $post_kkk['addtime'] <=$time_start) {               /* if ($only_post['cate_id'] == $_POST['cate_id'] && $only_post['username'] == $_POST['username1'] && $category['username_repeatability']==1) {                    outputjson(array('msg' => '该会员账号已申请过该优惠，不能再次申请。'));                    exit;                }                if($only_post['username'] == I('post.username') && $category['username_repeatability']==1 && $usernametime >= $time_start && $usernametime <= $time_end && $post_kkk['addtime'] >=$time_start){                    outputjson(array('msg' => '该会员账号已申请过该优惠，不能再次申请！'));                    exit;                } *///              判断邮箱                if (I('post.contact_via_mail') == I('post.contact_via_mail') && $category['contact_via_mail_repeatability']==1 && $usernametime <= $time_start && $post_kkk['addtime'] <=$time_start) {                        outputjson(array('msg' => '该邮箱已申请过该优惠，不能再次申请。'));                        exit;                }                if(I('post.contact_via_mail') == I('post.contact_via_mail')  && $category['contact_via_mail_repeatability']==1 && $usernametime >= $time_start && $usernametime <= $time_end && $post_kkk['addtime'] >=$time_start){                    outputjson(array('msg' => '该邮箱已申请过该优惠，不能再次申请！'));                    exit;                }//               判断QQ                if (I('post.contact_qq') == I('post.contact_qq') && $category['contact_qq_repeatability']==1 && $usernametime <= $time_start && $post_kkk['addtime'] <=$time_start) {                        outputjson(array('msg' => '该qq已申请过该优惠，不能再次申请。'));                        exit;                }                if(I('post.contact_qq') == I('post.contact_qq') && $category['contact_qq_repeatability']==1 && $usernametime >= $time_start && $usernametime <= $time_end && $post_kkk['addtime'] >=$time_start){                    outputjson(array('msg' => '该qq已申请过该优惠，不能再次申请！'));                    exit;                }//              判断会员姓名                if (I('post.member_name') == I('post.member_name') && $category['member_name_repeatability']==1 && $usernametime <= $time_start && $post_kkk['addtime'] <=$time_start) {                        outputjson(array('msg' => '该会员姓名已申请过该优惠，不能再次申请。'));                        exit;                }                if (I('post.member_name') == I('post.member_name') && $category['member_name_repeatability']==1 && $usernametime >= $time_start && $usernametime <= $time_end && $post_kkk['addtime'] >=$time_start){                    outputjson(array('msg' => '该会员姓名已申请过该优惠，不能再次申请！'));                    exit;                }//                根据会员名，美东时间，ip申请次数，ip是否相同，来判断ip是不是达到上限                if ($post_kkk['username'] == I('post.username') && $usernametime <= $time_start && $post_kkk['addtime'] <=$time_start  && $category_repeatability[0]['ip_repeatability_repeat'] <= $datafff['ip_repeat_num'] && $only_post['ip'] == $usernameip && $datapost[0]['cate_id'] ==$category['id']) {                    outputjson(array('msg' => '"该IP今日已达到申请上限。"'));                    exit;                }                if ($post_kkk['username'] == I('post.username') && $usernametime >= $time_start && $usernametime <= $time_end && $post_kkk['addtime'] >=$time_start && $category_repeatability[0]['ip_repeatability_repeat'] <= $datafff['ip_repeat_num'] && $only_post['ip'] == $usernameip && $datapost[0]['cate_id'] ==$category['id']) {                    outputjson(array('msg' => '"该IP今日已达到申请上限！"'));                    exit;                }        //}            $data['addtime']=$usernametime;            $data['ip'] = $usernameip;            $data['yinid'] = I('post.yinid');            $data['set_bonus'] = I('post.set_bonus');//            if($category_repeatability[0]['ip_repeatability_repeat'] > $datafff['ip_repeat_num']){                $data['ip_repeat_num'] = $datafff['ip_repeat_num']+1;//            }else{//                $data['ip_repeat_num'] = $datafff['ip_repeat_num'];//            }            $User = M("Post"); // 实例化User对象// 要修改的数据对象属性赋值            if($category_repeatability[0]['ip_repeatability_repeat'] > $datafff['ip_repeat_num']){                $datasss['ip_repeat_num']=$datafff['ip_repeat_num']+1;            }else{                $datasss['ip_repeat_num']=$datafff['ip_repeat_num'];            }//            这里是 保存会员每次提交时，更新一次ip数量，用来判断ip可以申请多少次            $where['username'] = I('post.username');            $where['cate_id'] = $category['id'];            $where['ip'] = $usernameip;            $whereaddtime['addtime'] = array('GT',$time_start);//            $whereaddtime['addtime'] = array('LT',$tongyong_time_end);//            $User->where(array('username'=>I('post.username'),'cate_id'=>$category['id'],'ip'=>$usernameip)->save($datasss);            $User->where($where)->where($whereaddtime)->save($datasss);//            echo $User->getLastSql();die;//            加入会员信息//            print_r($data);die;            $result  = D('Post')->add($data);            if($result) {                outputjson(array('status'=>1, 'msg'=>'申请成功！'));            }else{                outputjson(array('status'=>-1, 'msg'=>'申请失败！请联系客服！'));            }        }else{            outputjson(array('status'=>0, 'msg'=>'非法请求！'));        }    }    function Username_check(){        $username = I('post.title');        $data = M('post')->where('title')->select();        dump($data);die;    }    //验证码    public function verify(){        $Verify = new \Think\Verify();        $Verify->codeSet = '0123456789';        $Verify->fontSize = 13;        $Verify->length = 4;        $Verify->entry();    }    protected function check_verify($code){        $verify = new \Think\Verify();        return $verify->check($code);    }    public function logout(){        session('adminId',null);        session('username',null);        redirect(U('Login/index'));    }}
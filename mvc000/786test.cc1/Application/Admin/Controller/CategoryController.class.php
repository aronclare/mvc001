<?php/** * * @authors    阿连 () * @wat Arlen专属上古神兽 * @url * * ━━━━━━神兽出没━━━━━━ * 　　   ┏┓　 ┏┓ * 　┏━━━━┛┻━━━┛┻━━━┓ * 　┃              ┃ * 　┃       ━　    ┃ * 　┃　  ┳┛ 　┗┳   ┃ * 　┃              ┃ * 　┃       ┻　    ┃ * 　┃              ┃ * 　┗━━━┓      ┏━━━┛ Code is far away from bugs with the animal protecting. *       ┃      ┃     神兽保佑,代码无bug。 *       ┃      ┃ *       ┃      ┗━━━┓ *       ┃      　　┣┓ *       ┃      　　┏┛ *       ┗━┓┓┏━━┳┓┏━┛ *     　  ┃┫┫　┃┫┫ *     　  ┗┻┛　┗┻┛ * * ━━━━━━感觉萌萌哒━━━━━━ */namespace Admin\Controller;use Admin\Controller;/** * 项目管理 */header("Content-Type: text/html;charset=utf-8");class CategoryController extends BaseController{    /**     * 项目列表     * @return [type] [description]     */    public function index($key="")    {        if($key === ""){            $model = M('category');          }else{            $where['title'] = array('like',"%$key%");            $where['name'] = array('like',"%$key%");            $where['_logic'] = 'or';            $model = M('category')->where($where);        }                 $category = $model->limit($Page->firstRow.','.$Page->listRows)->where($where)->order('sort DESC, id DESC')->select();        $this->assign('model',getSortedCategory($category));        $this->display();       }    public function csv($key=""){        $data=I('post.');        $data_test1=I('post.test1');        $data_test2=I('post.test2');        $aaa[I('post.time')] = array(array('gt',$data_test1),array('lt',$data_test2)) ;        array_walk($data, function(&$v){            $v=implode(',', $v);        });        create_csv($data);        if($key === ""){            $model = D('PostView');        }else{            $where['post.title'] = array('like',"%$key%");            $where['post.content'] = array('like',"%$key%");            $where['member.username'] = array('like',"%$key%");            $where['category.title'] = array('like',"%$key%");            $where['_logic'] = 'or';            $model = D('PostView')->where($where);        }        $count  = $model->where($where)->count();// 查询满足要求的总记录数        $Page = new \Extend\Page($count,15);// 实例化分页类 传入总记录数和每页显示的记录数(25)        $show = $Page->show();// 分页显示输出        $post = $model->limit($Page->firstRow.','.$Page->listRows)->where($where)->order('post.id DESC')->select();        $this->assign('model', $post);        $this->assign('page',$show);        $this->display();    }    /**     * 添加项目     */    public function add()    {        //默认显示添加表单        if (!IS_POST) {            $model = M('category')->select();            $this->display();        }        if (IS_POST) {            //如果用户提交数据            $model = D("Category");            $data = $model->create();            if (!$data) {                // 如果创建失败 表示验证没有通过 输出错误提示信息                $this->error($model->getError());                exit();            } else {                if (!empty($_FILES)) {                    $upload = new \Think\Upload(); // 实例化上传类                    $upload->maxSize = 3145728; // 设置附件上传大小                    $upload->exts = array('jpg', 'gif', 'png', 'jpeg'); // 设置附件上传类型                    $upload->rootPath = './public/'; // 设置附件上传根目录                    $upload->savePath = 'upload'; // 设置附件上传（子）目录                    // 上传文件                    $info = $upload->upload();                    if ($info) {                        $zhonzhuan = "./Public/" . $info['img_url']['savepath'] . $info['img_url']['savename'];                        $data['icon_url'] = $zhonzhuan;                    }                }               // dump($data);die;                if ($model->add($data)) {                    $this->success("项目更新成功", U('category/index'));                } else {                    $this->error("项目更新失败");                }            }        }    }    /**     * 更新项目信息     * @param  [type] $id [项目ID]     * @return [type]     [description]     */    public function update($id)    {        $id = intval($id);        if (!IS_POST){            $model = M('category')->find(I('id'));//            $model_post = M('post')->find(I('id'));//            $this->assign('model_post',$model_post);            $this->assign('model',$model);            $this->display();        }        if (IS_POST) {            $model = D("Category");            $data = $model->create();			            if (!$data) {                $this->error($model->getError());            }else{                if (!empty($_FILES)) {                    $upload = new \Think\Upload(); // 实例化上传类                    $upload->maxSize = 3145728; // 设置附件上传大小                    $upload->exts = array('jpg', 'gif', 'png', 'jpeg'); // 设置附件上传类型                    $upload->rootPath = './Public/'; // 设置附件上传根目录                    $upload->savePath = 'upload/'; // 设置附件上传（子）目录                    // 上传文件                    $info = $upload->upload();                    if ($info && $info['img_url']['savepath']!="") {                        $zhonzhuan = "/Public/" . $info['img_url']['savepath'] . $info['img_url']['savename'];                        $data['icon_url'] = $zhonzhuan;                    }                }//                echo "<pre>";//                print_r($data['icon_url']);//                die;                if ($model->save($data)) {                    redirect(U('category/index'));//                    $this->success("项目更新成功", U('category/index'));                } else {                    $this->error("请更改数据后再提交！");                }            }        }    }		//批量保存项目排序值	public function batchUpdateSort(){		$ids = I('post.id');		$sorts = I('post.sort');		if($ids == "" || $sorts == ""){			$this->error("请指定参数！");		}		if(count($ids) != count($sorts)){			$this->error("参数不正确！");		}		$i = 0;		foreach($ids as $id){			if(!is_numeric($id) || !is_numeric($sorts[$i])){				continue;			}			D('Category')->where(array('id'=>$id))->save(array('sort'=>$sorts[$i]));			$i++;		}        redirect(U('index'));//		$this->success("批量保存排序值成功！", U('index'));	}    /**     * 删除项目     * @param  [type] $id [description]     * @return [type]     [description]     */    public function delete($id)    {    	$id = intval($id);        $model = D('Category');        //查询属于        $posts = D('post')->where("cate_id= %d",$id)->select();        //验证通过        $result = $model->delete($id);        if($result){            redirect(U('category/index'));//            $this->success("项目删除成功", U('category/index'));        }else{            $this->error("项目删除失败");        }    }    public function push($id) {        $id = intval($id);        if (IS_GET) {            $status = D('category')->where("id= %d",$id)->getField('status');            if ($status === '0') {                $data['status'] = 1;            } else {                $data['status'] = 0;            }            $result = D('category')->where("id= %d",$id) -> save($data);            if ($result && $data['status'] === 1) {                redirect(U('Category/index'));//                $this -> success("开放申请操作成功！", U('Category/index'));            } elseif ($result && $data['status'] === 0) {                redirect(U('Category/index'));//                $this -> success("关闭申请操作成功！", U('Category/index'));            } else {                $this->error("操作失败");            }        } else {            $this->error("请指定操作参数！");        }    }}